@doc
== Emysql ==

Erlang MySQL driver, based on a rewrite at Electronic Arts. <a href="#Samples">Easy</a> to use, Strong <a href="#conp">connection pooling</a>, <a href="#preps">prepared statements</a> &amp; <a href="#storps">stored procedures</a>. Optimized for a central node architecture and OLTP.

While you can use mysql via ODBC, using a driver, like Emysql, should perform better. For <a href="#samples">samples</a> and <a href="#docs">docs</a> see below. Read the brief on <a href="#choosing">choosing a package</a> and about the <a href="#history">history</a> of the various MySQL drivers.

This package is a direct continuation of the original <a href="#1">emysql</a> with <a href="#fixes">fixes</a>, <a href="#updates">updates</a>, more <a href="#docs">documentation</a> and <a href="#samples">samples</a>. <a href="#1">Emysql</a> is a cleaner rewrite of <a href="#2">erlang-mysql-driver</a>, see <a href="#History">History</a>.

<hr/>

 <b>Which fork/package should I use?</b> Likely this one, but see <a href="#Choosing">Choosing</a>.<br />
 <b>Why are there so many?</b> See <a href="#History">History</a>.<br />
 <b>Who used <em>this</em> fork?</b> <a href="#History">Electronic Arts</a>.<br />
 <b>How do I ...?</b> See <a href="#Samples">Samples</a>.<br />
 <b>Hello ...?</b> See <a href="#Samples">Samples</a>.<br />

 <b>Download:</b> <a href="https://github.com/Eonblast/Emysql/archives/master">https://github.com/Eonblast/Emysql/archives/master</a><br />
 <b>Docs:</b> <a href="http://eonblast.github.com/Emysql/">http://eonblast.github.com/Emysql/</a><br />
 <b>Issues:</b> <a href="https://github.com/Eonblast/Emysql/issues">https://github.com/Eonblast/Emysql/issues</a><br />
 <b>Repository:</b> <a href="https://github.com/Eonblast/Emysql">https://github.com/Eonblast/Emysql</a><br />

<hr/>

== Contents ==

<li> <a href="#Choosing">Choosing</a></li>
<li> <a href="#Samples">Samples</a></li>
<li> <a href="#Usage">Usage</a></li>
<li> <a href="#History">History</a></li>
<li> <a href="#Links">Links</a></li>
<li> <a href="#Todo">Todo</a></li>
<li> <a href="#License">License</a></li>

<hr/>

== Choosing                                              ==

==== Best ====
In most cases, especially for high performance and stability, this package, <a href="#emysql">Emysql</a>, will be the best choice. It was rewritten from the ground up to overcome fundamental issues of 'erlang-mysql-driver'. It also has some usable docs meanwhile. 

==== Simple ====
If you are looking for the <b>plain necessities</b>, you should use the <a href="#7">ejabberd</a> mysql driver. It is simple, battle tested and stable. There are comprehensive instructions in the source comments.

==== Transaction ====
For <b>mnesia-style transactions</b>, one of the multiple '<a href="#22">erlang-mysql-driver</a>s' may suite you best.  There are <a href="#16">quite many</a> branches of it out there, and they are based on the same project as the ejabberd driver. To learn more about out the differences between the drivers, see the <a href="#history">mysql driver history</a>.

== Getting Emysql ==

```
 $ git clone git://github.com/Eonblast/Emysql.git Emysql
'''


== Samples                                              ==

=== Hello World ===

This is a hello world program. Follow the three steps below to try it out. 
```
 
 -module(a_hello).
 -export([run/0]).
 
 run() ->
 
 	crypto:start(),
 	application:start(emysql),
 
 	emysql:add_pool(hello_pool, 1,
 		"hello_username", "hello_password", "localhost", 3306,
 		"hello_database", utf8),
 
 	emysql:execute(hello_pool,
 		<<"INSERT INTO hello_table SET hello_text = 'Hello World!'">>),
 
     Result = emysql:execute(hello_pool,
 		<<"select hello_text from hello_table">>),
 
 	io:format("~n~p~n", [Result]).
'''


We'll be coming back to this source to make it run on your machine in a minute. But let's look at the basic building blocks first:

=== Executing an SQL Statement ===

```
 emysql:execute(my_pool, <<"SELECT * from mytable">>).
'''

For the exact spec, see below, <a href="#Usage">Usage</a>. Regarding the 'pool', also see below.

=== Executing a Prepared Statement ===

```
 emysql:prepare(my_stmt, <<"SELECT * from mytable WHERE id = ?">>).
 
 emysql:execute(my_pool, my_stmt, [1]).
'''

=== Executing Stored Procedures ===

```
 emysql:execute(my_pool, <<"create procedure my_sp() begin select * from mytable; end">>).
 
 emysql:execute(my_pool, <<"call my_sp();">>).
'''

=== Result Record ===

```
 -record(result_packet, {seq_num, field_list, rows, extra}).
 
'''
=== Converting Row Data To Records ===

```
 -record(foo, {bar, baz}).
'''

```
 Result = emysql:execute(pool1, <<"select bar, baz from foo">>).
 Recs = emysql_util:as_record(Result, foo, record_info(fields, foo)).
 Bars = [Foo#foo.bar || Foo <- Recs].
'''

=== Adding a Connection to the Connection Pool ===

Emysql uses a sophisticated connection pooling mechanism.

```
 emysql:add_pool(my_pool, 1, "myuser", "mypass", "myhost", 3306, "mydatabase", utf8).
'''

=== Running Hello World ===

Let's run the hello world sample from above:

==== 1. Build Emysql ====

Build emysql.app, using make:

```
 $ cd Emysql
 $ make
'''


==== 2. Make a Sample Database ====

For use in the above sample (and all of those below, too), create a local mysql database. You should have a mysql server installed and running:
```
 
 $ mysql [-u<user> -p]
 mysql> create database hello_database;
 mysql> use hello_database;
 mysql> create table hello_table (hello_text char(20));
 mysql> grant all privileges on hello_database.* to hello_username@localhost identified by 'hello_password';
'''

==== 3. Paste &amp; Run Hello ====

Be sure to have ./ebin in your Erlang path. The hello-world source as shown above already waits in the Emysql directory, as hello.erl. Just compile and run it:

```
 $ erlc hello.erl
 $ erl -pa ./ebin -s hello run -s init stop -noshell
'''

That's it. 

There are more sample programs:

== More Samples ==
Sample programs are in ./samples. 

<li> <a href="http://github.com/Eonblast/Emysql/blob/master/samples/a_hello.erl">a_hello</a> - Hello World</li>
<li> <a href="http://github.com/Eonblast/Emysql/blob/master/samples/b_raw.erl">b_raw</a> - Hello World, raw output</li>
<li> <a href="http://github.com/Eonblast/Emysql/blob/master/samples/c_rows_as_records.erl">c_rows_as_records</a> - Using Erlang records to access result rows</li>
<li> <a href="http://github.com/Eonblast/Emysql/blob/master/samples/d_prepared_statement.erl">d_prepared_statement</a> - Using prepared statements</li>
<li> <a href="http://github.com/Eonblast/Emysql/blob/master/samples/e_stored_procedure.erl">e_stored_procedure</a> - Using stored procedures</li>

To run the samples, create the database as listed above at localhost, and simply run the compile &amp; run batches:

```
 $ cd samples
 $ ./a_hello
 $ ./b_raw
 $ ./c_rows_as_records
 $ ./d_prepared_statement
 $ ./e_stored_procedure
 
'''
or (after building emysql.app and the database, as explained above), start a_hello etc. manually along these lines:

```
 $ make
 $ cd samples
 $ erlc a_hello.erl
 $ erl -pa ../ebin -s a_hello run -s init stop -noshell
'''

== Usage  ==

General Notes on using Emysql, including the actual specs:

==== Starting an Application ====

The Emysql driver is an Erlang gen-server, and, application.

```
 crypto:start(),
 application:start(emysql).
'''

==== Adding a Pool                                        ====

```
 % emysql:add_pool(PoolName, PoolSize, Username, Password, Host, Port, Database, Encoding) ->
 %	 ok | {error, pool_already_exists}  
 % PoolName = atom()  
 % PoolSize = integer()  
 % Username = string()  
 % Password = string()  
 % Host = string()  
 % Port = integer()  
 % Database = string()  
 % Encoding = atom()  
 
 emysql:add_pool(mypoolname, 1, "username", "mypassword", "localhost", 3306, "mydatabase", utf8).
'''

==== More Record Types ====

```
 -record(result_packet, {seq_num, field_list, rows, extra}).
 
 -record(ok_packet, {seq_num, affected_rows, insert_id, status, warning_count, msg}).
 
 -record(error_packet, {seq_num, code, msg}).
'''

For other record types, see include/emysql.hrl.

==== Executing SQL Statements ====

```
 % emysql:execute(PoolName, Statement) -> result_packet() | ok_packet() | error_packet()  
 % PoolName = atom()  
 % Statement = string() | binary()  
 
 emysql:execute(mypoolname, <<"SELECT * from mytable">>).
 # result_packet{field_list=[...], rows=[...]}
 
 emysql:execute(mypoolname, <<"UPDATE mytable SET bar = 'baz' WHERE id = 1">>).
 # ok_packet{affected_rows=1}
'''

==== Executing Prepared Statements                           ====

```
 % emysql:prepare(StmtName, Statement) -> ok  
 % StmtName = atom()  
 % Statement = binary() | string()  
 
 emysql:prepare(my_stmt, <<"SELECT * from mytable WHERE id = ?">>).
 # ok
'''

```
 % emysql:execute(PoolName, StmtName, Args) -> result_packet() | ok_packet() | error_packet()  
 % StmtName = atom()  
 % Args = [term()]  
 
 emysql:execute(mypoolname, my_stmt, [1]).
 #result_packet{field_list=[...], rows=[...]}
'''

==== Executing Stored Procedures                           ====

```
 % emysql:execute(PoolName, StmtName, Args) -> result_packet() | ok_packet() | error_packet()  
 % StmtName = atom()  
 % Args = [term()]  
 
 emysql:execute(hello_pool,
 	<<"create procedure sp_hello() begin select * from hello_table; end">>).
 {ok_packet,1,0,0,2,0,[]}
 
 emysql:execute(hello_pool, <<"call sp_hello();">>).
 [{result_packet,6,
                 [{field,2,<<"def">>,<<"hello_database">>,<<"hello_table">>,
                         <<"hello_table">>,<<"hello_text">>,<<"hello_text">>,
                         254,<<>>,33,60,0,0}],
                 [[<<"Hello World!">>],[<<"Hello World!">>]],
                 <<>>},
 {ok_packet,7,0,0,34,0,[]}]
'''
 
 Note that you are getting back a list of results here.
 
==== Converting Row Data To Records ====

```
 % emysql_util:as_record(ResultPacket, RecordName, Fields) -> Result  
 % ResultPacket = result_packet()  
 % RecordName = atom() (the name of the record to generate)  
 % Fields = [atom()] (the field names to generate for each record)  
 % Result = [record()]  
 
 -module(fetch_example).
 -record(foo, {bar, baz, bat}).
 
 fetch_foo() ->
    Result = emysql:execute(pool1, <<"select bar, baz, bat from foo">>),
    Recs = emysql_util:as_record(Result, foo, record_info(fields, foo)),
    [begin
 	  io:format("foo: ~p, ~p, ~p~n", [Foo#foo.bar, Foo#foo.baz, Foo#foo.bat])
     end || Foo <- Recs].
'''


== History                                                ==

Open Source Erlang MySQL driver efforts are a fractured matter. You may find yourself digging in the source to find out about their relationship with each other - and which one to pick. Here is a brief history.

<b>Yxa:</b> The first Erlang MySQL driver, in <a href="#17">~270 lines</a> of code, seems to have been written between 2001 and 2004 by <a href="#ma">Magnus Ahltorp</a> at the Swedish <a href="#3">Royal Institute of Technology</a>. It exposes low level, blocking functions to talk 4.0 protocol with a MySQL server. In 2005 <a href="#fr">Fredrik Thulin</a> brought the driver into its current modular form to use it for the the SIP proxy <a href="#5">Yxa</a> while working at the <a href="#19">Stockholm University</a>. It has three process layers: a high level, round-robin connection pooling module; then, middle-man, single-connection, blocking processes that do the bit-level wrangling with the <a href="#18">MySQL protocol</a>. This module, mysql_conn, can also be used as a single-connection, stand-alone driver. And below this, there are small, protocol-agnostic receiver processes that handle the socket communication with the server, no matter the contents. Fredrik implemented gen-server behavior, added logging, error messages, upgraded authentication, and thoroughly commented the source. This <a href="#4">mysql driver</a> is working, complete and stable since at least 2007, it is available as part of <a href="#5">Yxa 1.0</a> (hosted on github][6]). It has no support for transactions or stored procedures. It is the basis for the following two packages. Its basic modular division and general functionality were not changed but only enhanced and it had originally been agreed upon that the Yxa branch should receive and merge the contributions of the later forks upstream. Unfortunately, that did not come to pass.


<b>ejabberd:</b> In 2006, a <a href="#7">fork</a> of the Yxa driver was created by <a href="#mr">Mickael Remond</a> at <a href="#8">Process One</a> to become part of the successful instant messaging server <a href="#9">ejabberd</a> (also hosted <a href="#10">at github</a>). It can be assumed to be as stable as the Yxa branch, didn't change a byte in the lowest level, and only enhanced the higher levels. The difference to the original Yxa branch mainly consists of added inspection functions that help using the query results, and of an <a href="#11">independent adoption</a> to the MySQL 4.1 client-server protocol. The original Yxa branch has meanwhile adopted edoc comment format, which makes the sources look more different than they actually are.  Find a Jan 2011 diff between Yxa and the ejabberd version <a href="#12">here</a>, and one ignoring comments <a href="#13">here</a>. These two branches could, be merged quiet easily, probably without any change in functionality.

<b>erlang-mysql-driver:</b> The storied life of this branch began in 2006 when <a href="#ys">Yariv Sadan</a> created a fork from the ejabberd branch, made it a standalone project, gave it the maximally generic name that stuck, and hosted it at <a href="#15">Google Code</a>. Before he moved on to work at Facebook, he added high-level handling of prepared statements and transactions, and at long last completed some loose ends with the connection pooling that had been known to be lagging since the Yxa version. There were changes both in the original Yxa and the ejabberd branch after the forking off that never made their way into this fork, but in all likelihood they must be minor. It is not always obvious if the changes in erlang-mysql-driver had reached their intended final form. The separation of the three process layers seems to have suffered and complicated enhancements as the highest layer module, mysql.erl, started to become entangled with the second, mysql_conn.erl. Maybe that had a part in why the upstream merge never happened. The main repository of this fork lay dormant since Oct '07 when in Feb '10, Dave Smith started making some <a href="#15">updates</a> and put them on github. The driver is now enjoying a couple of active <a href="#16">forks</a> that make a convincing case for the github Network graphs.

A <a href="#20">parallel</a> fork from Yariv's branch, not entangled with Dave's tree, is <a href="#22">the one</a> by <a href="#ng">Nick Gerakines</a>. It may technically be the strongest of the erlang-mysql-driver forks, with a lot of clean up work by some very smart guys put in. It is generally less well known. And much less forked. In the end, the branch was abandoned in favor of <a href="#Emysql">Emysql</a>. In all branches, docs beyond the source comments remain lacking.

<b>Emysql</b> was created from scratch in 2009, specifically to achieve better stability and throughput. It was proposed and written by <a href="#jv">Jacob Vorreuter</a> at Electronic Arts and deployed at Shawn Fanning's Rupture.com, a social network site for gamers. Initially, <a href="#ng">Nick Gerakines</a>, Jacob's boss at EA, rewrote large parts of erlang-mysql-server to <a href="#21">clean it up</a>. But some fundamental problems remained and when half a year in, they could still not overcome performance and stability issues, Nick gave Jacob green light to rewrite it from the ground up because they felt that, in Jacob's words, the Yxa branch had been touched by so many people that it had become more complicated than necessary. According to Jacob, <a href="#bw">Bill Warnecke</a> helped in the early design and testing. They abandoned the separation into three process layers and pulled the socket handling and bit-parsing into one module, coupling the functionality in direct function calls. It looks like they borrowed some chore lines from Magnus but generally created a new, straight forward architecture focussed on providing a high performance node. Not only can Emysql have multiple connections, but multiple pools of multiple connections each, which makes for a strong central OLTP manager. Jacob says that Emysql is pretty stable and ran without issues in production at EA. Nick remembers: "The primary way we used it was to have a single Erlang node be the MySQL communication point and allow a number of connected nodes to connect through it to MySQL. We wanted very high throughput with many pids across a grid connecting to it and needed the ability to have a number of MySQL connections open for connection pooling." Rupture was killed in the consolidations of 2008. But Shawn could probably keep the money and we the fond memory of Napster and now, the glistening Emysql.

<b>Eonblast Emysql</b> is a continuation fork of <a href="#1">Jacob's work</a>, including all his commits and adding <a href="#docs">docs</a>, <a href="#samples">samples</a>, <a href="#fixes">fixes</a> and <a href="#24">extensions</a>. <a href="#hd">Henning Diedrich</a>, <a href="#vb">Vitaliy Batichko</a> and <a href="#cr">Chris Rempel</a> have contributed updates to this branch. Support for stored procedures has been added, but the fork is otherwise still very close to the original, which currently lays dormant.

Fredrik, Nick and Jacob helped shedding light on the matter. Thank you very much! Errors and omissions are <a href="#hd">mine</a>. Please let me know about typos and errors you may be spotting. Thanks.


=== Links and References ===

<li class="ref url"> emysql:<a name="1" id="1" href="http://github.com/JacobVorreuter/emysql" target="_parent">http://github.com/JacobVorreuter/emysql</a></li>
<li class="ref url"> erlang-mysql-driver:<a name="2" id="2" href="http://github.com/dizzyd/erlang-mysql-driver" target="_parent">http://github.com/dizzyd/erlang-mysql-driver</a></li>
<li class="ref url"> Royal Institure of Technology:<a name="3" id="3" href="http://www.kth.se/" target="_parent">http://www.kth.se/</a></li>
<li class="ref url"> Yxa mysql driver:<a name="4" id="4" href="https://github.com/fredrikt/yxa/tree/master/src/mysql" target="_parent">https://github.com/fredrikt/yxa/tree/master/src/mysql</a></li>
<li class="ref url"> Yxa Home:<a name="5" id="5" href="http://www.stacken.kth.se/project/yxa/index.html" target="_parent">http://www.stacken.kth.se/project/yxa/index.html</a></li>
<li class="ref url"> Yxa repository at github:<a name="6" id="6" href="https://github.com/fredrikt/yxa" target="_parent">https://github.com/fredrikt/yxa</a></li>
<li class="ref url"> ejabberd mysql driver:<a name="7" id="7" href="http://svn.process-one.net/ejabberd-modules/mysql/trunk/" target="_parent">http://svn.process-one.net/ejabberd-modules/mysql/trunk/</a></li>
<li class="ref url"> Process One Home:<a name="8" id="8" href="https://support.process-one.net" target="_parent">https://support.process-one.net</a></li>
<li class="ref url"> ejabberd Home:<a name="9" id="9" href="http://www.process-one.net/en/ejabberd/" target="_parent">http://www.process-one.net/en/ejabberd/</a></li>
<li class="ref url"> ejabberd repository at github:<a name="10" id="10" href="https://github.com/processone/ejabberd/" target="_parent">https://github.com/processone/ejabberd/</a></li>
<li class="ref url"> ejabberd MySQL 4.1. patch:<a name="11" id="11" href="https://support.process-one.net/doc/display/CONTRIBS/Yxa" target="_parent">https://support.process-one.net/doc/display/CONTRIBS/Yxa</a></li>
<li class="ref url"> Diff of Yxa and ejabberd mysql drivers:<a name="12" id="12" href="https://github.com/Eonblast/Emysql/tree/master/doc/diff-ejabberd-yxa.txt" target="_parent">https://github.com/Eonblast/Emysql/tree/master/doc/diff-ejabberd-yxa.txt</a></li>
<li class="ref url"> Diff of Yxa and ejabberd mysql drivers ignoring comment changes:<a name="13" id="13" href="https://github.com/Eonblast/Emysql/tree/master/doc/diff-ejabberd-yxa-2.txt" target="_parent">https://github.com/Eonblast/Emysql/tree/master/doc/diff-ejabberd-yxa-2.txt</a></li>
<li class="ref url"> original erlang-mysql-driver:<a name="14" id="14" href="http://code.google.com/p/erlang-mysql-driver/" target="_parent">http://code.google.com/p/erlang-mysql-driver/</a></li>
<li class="ref url"> Dave Smith's erlang-mysql-driver at github, currently not maintained:<a name="15" id="15" href="http://github.com/dizzyd/erlang-mysql-driver" target="_parent">http://github.com/dizzyd/erlang-mysql-driver</a></li>
<li class="ref url"> Fork graph of erlang-mysql-driver at github:<a name="16" id="16" href="https://github.com/dizzyd/erlang-mysql-driver/network" target="_parent">https://github.com/dizzyd/erlang-mysql-driver/network</a></li>
<li class="ref url"> Earliest Yxa mysql driver:<a name="17" id="17" href="http://www.stacken.kth.se/projekt/yxa/mysql-0.1.tar.gz" target="_parent">http://www.stacken.kth.se/projekt/yxa/mysql-0.1.tar.gz</a></li>
<li class="ref url"> MySQL protocol:<a name="18" id="18" href="http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol" target="_parent">http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol</a></li>
<li class="ref url"> <a name="19" id="19" href="http://www.su.se/english/" target="_parent">http://www.su.se/english/</a></li>
```
   "Stockholm University"
'''
<li class="ref url"> <a name="20" id="20" href="https://github.com/ngerakines/erlang_mysql/network" target="_parent">https://github.com/ngerakines/erlang_mysql/network</a></li>
```
   "Network graph of Nick's erlang-mysql-driver fork"
'''
<li class="ref url"> <a name="21" id="21" href="https://github.com/ngerakines/erlang_mysql/commits/master" target="_parent">https://github.com/ngerakines/erlang_mysql/commits/master</a></li>
```
   "Commits in Nick Gerakines' erlang-mysql-driver fork"
'''
<li class="ref url"> <a name="22" id="22" href="https://github.com/ngerakines/erlang_mysql" target="_parent">https://github.com/ngerakines/erlang_mysql</a></li>
```
   "Nick Gerakines' erlang-mysql-driver fork"
'''
<li class="ref url"> <a name="23" id="23" href="http://method.com/detail/CaseStudy/65" target="_parent">http://method.com/detail/CaseStudy/65</a></li>
```
   "About Rupture"
'''
<li class="ref url"> Commits in the current Eonblast Emysql branch:<a name="24" id="24" href="https://github.com/Eonblast/Emysql/commits/master" target="_parent">https://github.com/Eonblast/Emysql/commits/master</a></li>

    <br />
<li class="ref email"> Magnus Ahltorp:<a name="ma" id="ma" href="mailto:ahltorp@nada.kth.se">ahltorp@nada.kth.se</a></li>
<li class="ref email"> Fredrik Thulin:<a name="fr" id="fr" href="mailto:ft@it.su.se">ft@it.su.se</a></li>
<li class="ref email"> Mickael Remond:<a name="mr" id="mr" href="mailto:mickael.remond@process-one.net">mickael.remond@process-one.net</a></li>
<li class="ref url"> Yariv Sadan:<a name="ys" id="ys" href="http://yarivsblog.blogspot.com" target="_parent">http://yarivsblog.blogspot.com</a></li>
<li class="ref email"> Dave Smith:<a name="ds" id="ds" href="mailto:dizzyd@dizzyd.com">dizzyd@dizzyd.com</a></li>
<li class="ref url"> Nick Gerakines:<a name="ng" id="ng" href="https://github.com/ngerakines" target="_parent">https://github.com/ngerakines</a></li>
<li class="ref url"> Jacob Vorreuter:<a name="jv" id="jv" href="https://github.com/JacobVorreuter" target="_parent">https://github.com/JacobVorreuter</a></li>
<li class="ref email"> Bill Warnecke:<a name="bw" id="bw" href="mailto:bill@rupture.com">bill@rupture.com</a></li>
<li class="ref email"> Henning Diedrich:<a name="hd" id="hd" href="mailto:hd2010@eonblast.com">hd2010@eonblast.com</a></li>
<li class="ref url"> Vitaliy Batichko:<a name="vb" id="vb" href="https://github.com/bva" target="_parent">https://github.com/bva</a></li>
<li class="ref url"> Chris Rempel:<a name="cr" id="cr" href="https://github.com/csrl" target="_parent">https://github.com/csrl</a></li>

<li class="ref url"> Eonblast Emysql Repository:<a name="emysql" id="emysql" href="https://github.com/Eonblast/Emysql" target="_parent">https://github.com/Eonblast/Emysql</a></li>
<li class="ref url"> Emysql fixes:<a name="fixes" id="fixes" href="https://github.com/Eonblast/Emysql/issues/closed" target="_parent">https://github.com/Eonblast/Emysql/issues/closed</a></li>
<li class="ref url"> Emysql updates:<a name="updates" id="updates" href="https://github.com/Eonblast/Emysql/commits/master" target="_parent">https://github.com/Eonblast/Emysql/commits/master</a></li>
<li class="ref url"> Emysql online docs:<a name="docs" id="docs" href="http://eonblast.github.com/Emysql/" target="_parent">http://eonblast.github.com/Emysql/</a></li>

== Links                                                     ==

<li> <a href="http://github.com/Eonblast/Emysql">Emysql on Github</a></li>
<li> <a href="https://github.com/fredrikt/yxa/tree/master/src/mysql">Original Yxa mysql driver</a></li>
<li> <a href="http://svn.process-one.net/ejabberd-modules/mysql/trunk/">ejabberd fork</a></li>
<li> <a href="http://code.google.com/p/erlang-mysql-driver/">'erlang-mysql-driver'</a></li>
<li> <a href="http://github.com/dizzyd/erlang-mysql-driver">Dave Smith's erlang-mysql-driver fork</a></li>
<li> <a href="https://github.com/JoelPM/erlang-mysql-driver">A maintained&#134; erlang-mysql-driver</a>  fork</li>
<li> <a href="https://github.com/chernomor/erlang-mysql-driver">Another maintained&#134; erlang-mysql-driver</a>  fork</li>
<li> <a href="http://forge.mysql.com/wiki/MySQL_Internals_ClientServer_Protocol">MySQL Client Server Protocol</a></li>
<li> <a href="ftp://ftp.fu-berlin.de/unix/databases/mysql/Downloads/MySQL-5.5/mysql-5.5.8.tar.gz">MySQL 5.5 Source</a></li>

 &#134;maintained at the time of writing, Feb 2011.



== TODO                                                      ==
<li> decrementing pool size could close sockets that are in use</li>
<li> spawn individual conn_mgr gen_server processes for each pool</li>
<li> allow row results to be returned as binary</li>

== License                                                   ==

Copyright &#169; 2009-2011
Bill Warnecke <a href="mailto:bill@rupture.com">bill@rupture.com</a>,
Jacob Vorreuter <a href="mailto:jacob.vorreuter@gmail.com">jacob.vorreuter@gmail.com</a>,
Henning Diedrich <a href="mailto:hd2010@eonblast.com">hd2010@eonblast.com</a>,
Eonblast Corporation [http://www.eonblast.com].

Permission is  hereby  granted,  free of charge,  to any person
obtaining  a copy of this software and associated documentation
files  (the  "Software"),  to  deal  in  the  Software  without 
restriction,  including  without limitation  the rights to use,
copy, modify,  merge,  publish, distribute,  sublicense, and/or 
sell  copies of the  Software,  and to permit  persons  to whom
the  Software  is furnished to do so,  subject to the following 
conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
OF  MERCHANTABILITY,  FITNESS  FOR  A  PARTICULAR  PURPOSE  AND
NONINFRINGEMENT. IN  NO  EVENT  SHALL  THE AUTHORS OR COPYRIGHT
HOLDERS  BE  LIABLE FOR  ANY CLAIM, DAMAGES OR OTHER LIABILITY,
WHETHER IN AN ACTION OF CONTRACT,  TORT  OR OTHERWISE,  ARISING
FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE  OR THE USE OR
OTHER DEALINGS IN THE SOFTWARE.












<script>
// Jump directly to a referenced url given in trailing '[]:...'-notation
function goto(tag) { parent.document.location.href = url(tag); }
function url(tag) { var o=document.getElementById(tag); return o ? o.href : '#'+tag; }
</script>
